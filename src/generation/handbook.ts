// file: src/generation/handbook.ts
import fs from 'node:fs';
import path from 'node:path';
import { generateMarkdown } from '../llm/openai';

export type HandbookInput = {
  workTitle: string;
  author: string;
  targetMinutes?: number;
  desiredChapters?: number;
  outDir?: string;
};

export type HandbookResult = {
  markdownPath: string;
};

function clamp(n: number, a: number, b: number) {
  return Math.max(a, Math.min(b, n));
}
function ensureDir(dir: string) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

/** üîé Parser spisu tre≈õci: zbiera {title, description} z sekcji "## Spis tre≈õci". */
export function parseToc(md: string): Array<{ title: string; description: string }> {
  const lines = md.split('\n');
  const items: Array<{ title: string; description: string }> = [];
  let inToc = false;

  for (const raw of lines) {
    const line = raw.trim();
    if (/^##\s*Spis\s+tre≈õci\s*$/i.test(line)) { inToc = true; continue; }
    if (!inToc) continue;
    if (!line) continue;
    if (/^---+$/.test(line) || /^##\s+Rozdzia≈Ç\s+\d+:/i.test(line) || /^##\s+Epilog/i.test(line)) break;

    // np. "- 1. **Tytu≈Ç** ‚Äî opis" | "- **Tytu≈Ç** ‚Äì opis" | "1. Tytu≈Ç - opis"
    const m =
      line.match(/^(?:-?\s*\d+\.\s*|\-\s*)?\*\*(.+?)\*\*\s*[‚Äî‚Äì-]\s*(.+)\s*$/) ||
      line.match(/^(?:-?\s*\d+\.\s*|\-\s*)?(.+?)\s*[‚Äî‚Äì-]\s*(.+)\s*$/);
    if (m) {
      const title = (m[1] || '').trim();
      const description = (m[2] || '').trim();
      if (title && description) items.push({ title, description });
    }
  }
  return items;
}

/** Monolit: ToC + rozdzia≈Çy do jednego pliku (bez DB). */
export async function generateHandbook(input: HandbookInput): Promise<HandbookResult> {
  const targetMinutes = clamp(Math.round(input.targetMinutes ?? 5), 3, 8);
  const desiredChapters = clamp(Math.round(input.desiredChapters ?? 12), 10, 15);
  const wordsTarget = targetMinutes * 160;
  const outDir = input.outDir || path.join('debug', 'handbooks');
  ensureDir(outDir);

  const prompt = [
    `Zwr√≥ƒá WY≈ÅƒÑCZNIE czysty Markdown (bez code fence‚Äô√≥w).`,
    `Tworzysz narracyjny skr√≥t dzie≈Ça w duchu METODY ODKRYWCZEJ.`,
    `Dzie≈Ço: "${input.workTitle}" ‚Äî ${input.author}.`,
    ``,
    `ZASADY TWORZENIA:`,
    `- Czas tera≈∫niejszy; perspektywa bliska (kamera ‚Äûna ramieniu‚Äù).`,
    `- SCENA zamiast streszczenia; ≈õwiat≈Ço/d≈∫wiƒôk/ruch/gest/pauzy.`,
    `- Dialogi OBOWIƒÑZKOWE (min. 2 kwestie/rozdzia≈Ç; ka≈ºda kwestia w osobnej linii z ‚Äû‚Äì ‚Äù).`,
    `- SHOW, DON'T TELL. ZERO analiz/ocen/interpretacji.`,
    `- Realizm odkrywczy: wy≈ÇƒÖcznie fakty i ≈õwiat orygina≈Çu; nic nie dopisuj.`,
    `- Rytm: kr√≥tkie zdania w napiƒôciu, d≈Çu≈ºsze w refleksji; brak ≈õciany tekstu.`,
    ``,
    `ORIENTACJA & PRZEJ≈öCIA (RPG vibe):`,
    `- Ka≈ºdy rozdzia≈Ç otwieraj liniƒÖ *Orientacja* (Miejsce; Czas; Kto), np.:`,
    `  *[Pok√≥j na poddaszu; ≈õwit; Raskolnikow]*`,
    `- Ka≈ºdy rozdzia≈Ç ko≈Ñcz 1 zdaniem *Przej≈õcia* zapowiadajƒÖcym kolejny tytu≈Ç (bez spoiler√≥w).`,
    ``,
    `FORMAT WYJ≈öCIOWY:`,
    `# ${input.workTitle} ‚Äî wersja skr√≥cona`,
    `(1 akapit immersyjnego opisu ≈õwiata/tematu ‚Äî tera≈∫niejszy, bez analizy)`,
    `## Spis tre≈õci`,
    `- 1. **<Tytu≈Ç>** ‚Äî SCENA: [miejsce; pora; bohaterowie]; AKCJA: <co siƒô dzieje>; DIALOG: >=2; CEL: <jaki efekt sceny>; PRZEJ≈öCIE: <kr√≥tka zapowied≈∫ nastƒôpnego>`,
    `(... razem ${desiredChapters} pozycji; opis ma byƒá TECHNICZNƒÑ INSTRUKCJƒÑ dla modelu, bez stylizacji literackiej)`,
    `---`,
    `## Rozdzia≈Ç 1: <Tytu≈Ç>`,
    `*[Miejsce; pora; kto]*`,
    `(2‚Äì3 kr√≥tkie akapity; dialogi w osobnych liniach; ≈ÇƒÖcznie 2‚Äì6 zda≈Ñ)`,
    `## Rozdzia≈Ç 2: <Tytu≈Ç>`,
    `(...)`,
    `## Epilog`,
    `(1‚Äì3 zdania; diegetycznie, bez metakomentarzy; tera≈∫niejszy)`,
    `- Zakaz: komentarzy o stylu/prawach/politykach; brak czasu przesz≈Çego w narracji.`,
  ].join('\n');

  let markdown = (await generateMarkdown(prompt)).replace(/\r/g, '').trim();
  if (!/^\s*#\s+/.test(markdown)) markdown = `# ${input.workTitle} ‚Äî wersja skr√≥cona\n\n${markdown}`;

  const ts = new Date().toISOString().replace(/[:.]/g, '-');
  const safeTitle = input.workTitle.replace(/[^\w\-]+/g, '_');
  const mdPath = path.join(outDir, `handbook-${safeTitle}-${ts}.md`);
  fs.writeFileSync(mdPath, markdown + '\n', 'utf8');

  return { markdownPath: mdPath };
}

/** Rozdzia≈Ç po rozdziale ‚Üí tylko pliki (content powstaje tutaj, nie w DB). */
export async function appendChaptersIndividuallyFromToc(args: {
  filePath: string;
  workTitle: string;
  author: string;
  targetMinutesPerChapter?: number;
  outDir?: string;
  range?: { from: number; to: number };
}): Promise<{ outDir: string; written: Array<{ index: number; title: string; path: string }> }> {
  const src = fs.readFileSync(args.filePath, 'utf8').replace(/\r/g, '');
  const toc = parseToc(src);
  if (!toc.length) throw new Error('Brak spisu tre≈õci.');

  const baseName = path.basename(args.filePath).replace(/\.md$/i, '');
  const baseOut = args.outDir || path.join(path.dirname(args.filePath), `${baseName}.chapters`);
  ensureDir(baseOut);

  const clampWords = (m: number) => clamp(Math.round(m * 160), 120, 400);
  const wordsTarget = clampWords(args.targetMinutesPerChapter ?? 0.5);

  const results: Array<{ index: number; title: string; path: string }> = [];
  const from = Math.max(1, args.range?.from ?? 1);
  const to = Math.min(toc.length, args.range?.to ?? toc.length);

  for (let i = from; i <= to; i++) {
    const ch = toc[i - 1];
    const next = i < toc.length ? toc[i] : null;
    const nextTitle = next ? next.title : '';
    const prompt = [
      `Zwr√≥ƒá WY≈ÅƒÑCZNIE czysty Markdown (bez code fence‚Äô√≥w).`,
      `Dzie≈Ço: "${args.workTitle}" ‚Äî ${args.author}`,
      `Rozdzia≈Ç ${i}: ${ch.title} ‚Äî ${ch.description}`,
      nextTitle ? `Nastƒôpny rozdzia≈Ç: "${nextTitle}". Zako≈Ñcz scenƒô *Przej≈õciem* do tego tytu≈Çu (bez spoiler√≥w).` : `To ostatni rozdzia≈Ç przed epilogiem: zamknij scenƒô bez zapowiedzi.`,
      ``,
      `Wygeneruj JEDNƒÑ SCENƒò w duchu METODY ODKRYWCZEJ:`,
      `## Rozdzia≈Ç ${i}: ${ch.title}`,
      `*[Miejsce; pora; kto]*`,
      `(2‚Äì3 kr√≥tkie akapity, ‚âà ${wordsTarget} s≈Ç√≥w; pe≈Çna immersja; czas tera≈∫niejszy)`,
      ``,
      `ZASADY:`,
      `- SHOW, DON'T TELL.`,
      `- Minimum 2 kwestie dialogowe (‚Äû‚Äì ‚Ä¶‚Äù), ka≈ºda w osobnej linii.`,
      `- Jedna ciƒÖg≈Ço≈õƒá przyczynowo-skutkowa, bez teleportacji.`,
      `- Realizm odkrywczy: tylko ≈õwiat i fakty z orygina≈Çu; nic nie dopisuj.`,
      `- Ka≈ºdy szczeg√≥≈Ç znaczƒÖcy (gest, spojrzenie, cisza).`,
      `- RPG vibe: orientacja na poczƒÖtku; na ko≈Ñcu 1 zdanie *Przej≈õcia* (je≈õli nextTitle istnieje).`,
      `- Zero metakomentarzy, zero m√≥wienia o ‚Äûstylu autora‚Äù, brak narracji z zewnƒÖtrz.`,
    ].join('\n');

    const md = (await generateMarkdown(prompt)).replace(/\r/g, '').trim();
    const content = /^##\s+Rozdzia≈Ç\s+\d+:/m.test(md) ? md : `## Rozdzia≈Ç ${i}: ${ch.title}\n${md}\n`;

    const safeTitle = ch.title
      .toLowerCase()
      .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
      .replace(/[ƒÖƒáƒô≈Ç≈Ñ√≥≈õ≈∫≈º]/g, (c) => ({ 'ƒÖ':'a','ƒá':'c','ƒô':'e','≈Ç':'l','≈Ñ':'n','√≥':'o','≈õ':'s','≈∫':'z','≈º':'z' } as any)[c] || c)
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '')
      .slice(0, 80);

    const file = path.join(baseOut, `ch-${String(i).padStart(2, '0')}-${safeTitle}.md`);
    fs.writeFileSync(file, content + '\n', 'utf8');
    results.push({ index: i, title: ch.title, path: file });
  }

  // Epilog
  const epilogPrompt = [
    `Zwr√≥ƒá WY≈ÅƒÑCZNIE czysty Markdown (bez code fence‚Äô√≥w).`,
    `Dzie≈Ço: "${args.workTitle}" ‚Äî ${args.author}`,
    `## Epilog`,
    `(1‚Äì3 zdania; diegetycznie; czas tera≈∫niejszy; zero metakomentarzy i uwag o stylu).`,
    `Ton: cichy, refleksyjny; domkniƒôcie bez t≈Çumaczenia sensu.`,
  ].join('\n');

  const epilogMd = (await generateMarkdown(epilogPrompt)).replace(/\r/g, '').trim();
  const epilog = /^##\s+Epilog/m.test(epilogMd) ? epilogMd : `## Epilog\n${epilogMd}\n`;
  fs.writeFileSync(path.join(baseOut, `epilog.md`), epilog + '\n');

  return { outDir: baseOut, written: results };
}
